//!native
//!optimize 2

import { GENERATED_DIFFICULTIES, GeneratedDifficultyEntry } from "./generated";

/**
 * Represents a difficulty level in the game.
 * @see [EJT Difficulty Chart](https://jtohs-joke-towers.fandom.com/wiki/Main_Difficulty_Chart)
 */
class Difficulty {
    /**
     * A map of all difficulties by their ID.
     */
	static readonly DIFFICULTIES = new Map<string, Difficulty>();

    /**
     * The name of the difficulty as shown in-game.
     */
	name: string | undefined;

    /**
     * A description of the difficulty, excerpted from the EJT wiki.
     * @see [EJT Difficulty Chart](https://jtohs-joke-towers.fandom.com/wiki/Main_Difficulty_Chart)
     */
	description: string | undefined;

    /**
     * The class of the difficulty.
     */
	class: number | undefined;

    /**
     * A visual rating of the difficulty, as shown in-game.
     */
	visualRating: string | undefined;

    /**
     * A numerical rating of the difficulty, used for sorting purposes.
     */
	layoutRating: number | undefined;

    /**
     * The color associated with the difficulty.
     */
	color: Color3 | undefined;

    /**
     * The image associated with the difficulty.
     */
	image: string | undefined;

    /**
     * Creates a Difficulty instance from a generated entry.
     * @param entry The generated difficulty entry.
     * @returns The created Difficulty instance.
     */
	private static fromGeneratedEntry(entry: GeneratedDifficultyEntry) {
		return new Difficulty(entry.id)
			.setName(entry.name)
			.setDescription(entry.description)
			.setVisualRating(entry.visualRating)
			.setLayoutRating(entry.layoutRating)
			.setClass(entry.class)
			.setColor(Color3.fromRGB(entry.colorR, entry.colorG, entry.colorB));
	}

    /**
     * Retrieves a difficulty by its ID.
     * @param id The ID of the difficulty.
     * @returns The Difficulty instance, or undefined if not found.
     */
	static get(id: string) {
		return Difficulty.DIFFICULTIES.get(id);
	}

    /**
     * Creates a new Difficulty instance.
     * @param id The unique identifier for the difficulty.
     */
	constructor(public readonly id: string) {
		Difficulty.DIFFICULTIES.set(id, this);
	}

    /**
     * Sets the name of the difficulty.
     * @param name The name to set.
     * @returns The Difficulty instance (for chaining).
     */
	setName(name: string) {
		this.name = name;
		return this;
	}

    /**
     * Sets the description of the difficulty.
     * @param description The description to set.
     * @returns The Difficulty instance (for chaining).
     */
	setDescription(description: string) {
		this.description = description;
		return this;
	}

    /**
     * Sets the class of the difficulty.
     * @param difficultyClass The class to set.
     * @returns The Difficulty instance (for chaining).
     */
	setClass(difficultyClass: number) {
		this.class = difficultyClass;
		return this;
	}

    /**
     * Sets the visual rating of the difficulty.
     * @param visualRating The visual rating to set.
     * @returns The Difficulty instance (for chaining).
     */
	setVisualRating(visualRating: string) {
		this.visualRating = visualRating;
		return this;
	}

    /**
     * Sets the layout rating of the difficulty.
     * @param layoutRating The layout rating to set.
     * @returns The Difficulty instance (for chaining).
     */
	setLayoutRating(layoutRating: number) {
		this.layoutRating = layoutRating;
		return this;
	}

    /**
     * Sets the color of the difficulty.
     * @param color The color to set.
     * @returns The Difficulty instance (for chaining).
     */
	setColor(color: Color3) {
		this.color = color;
		return this;
	}

    /**
     * Sets the image of the difficulty.
     * @param image The image to set.
     * @returns The Difficulty instance (for chaining).
     */
	setImage(image: string) {
		this.image = image;
		return this;
	}

	// <AUTO-GENERATED-STATIC-DIFFICULTIES>
	static readonly Blank = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Blank);

	static readonly Linguistic = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Linguistic);

	static readonly Randomization = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Randomization);

	static readonly Sketchy = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Sketchy);

	static readonly Spectrumplex = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Spectrumplex);

	static readonly Reflective = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Reflective);

	static readonly Construct = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Construct);

	static readonly Puzzling = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Puzzling);

	static readonly Walking = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Walking);

	static readonly Factorial = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Factorial);

	static readonly Zemblanity = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Zemblanity);

	static readonly Difficulty16 = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Difficulty16);

	static readonly PUMPKINDEATH = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.PUMPKINDEATH);

	static readonly LunaticHalloweenDifficulty = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.LunaticHalloweenDifficulty);

	static readonly Gingerbread = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Gingerbread);

	static readonly EpicEToH = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.EpicEToH);

	static readonly korn = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.korn);

	static readonly OooOOOoOOOOoooabovecatastrophicdifficultyOoOOooOOoo = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.OooOOOoOOOOoooabovecatastrophicdifficultyOoOOooOOoo);

	static readonly Sisyphus = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Sisyphus);

	static readonly Epinephrine = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Epinephrine);

	static readonly OVERKILL = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.OVERKILL);

	static readonly MSDSpeedy = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.MSDSpeedy);

	static readonly guiremorseless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.guiremorseless);

	static readonly Eschaton = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Eschaton);

	static readonly DivineEToH = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DivineEToH);

	static readonly guinil = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.guinil);

	static readonly AntiBoby = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.AntiBoby);

	static readonly TheFirstDifficulty = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TheFirstDifficulty)
		.setName("The First Difficulty")
		.setLayoutRating(-10000010)
		.setClass(-2)
		.setColor(Color3.fromRGB(0, 0, 0));

	static readonly TheLowerGap = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TheLowerGap)
		.setName("The Lower Gap")
		.setLayoutRating(-10000009)
		.setClass(-2)
		.setColor(Color3.fromRGB(0, 79, 0));

	static readonly Negativity = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Negativity)
		.setName("Negativity")
		.setLayoutRating(-10000008)
		.setClass(-2)
		.setColor(Color3.fromRGB(146, 36, 143));

	static readonly Unimpossible = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Unimpossible)
		.setName("Unimpossible")
		.setLayoutRating(-10000007)
		.setClass(-2)
		.setColor(Color3.fromRGB(192, 0, 255));

	static readonly Friendliness = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Friendliness)
		.setName("Friendliness")
		.setLayoutRating(-10000006)
		.setClass(-2)
		.setColor(Color3.fromRGB(130, 253, 0));

	static readonly TrueEase = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TrueEase)
		.setName("True Ease")
		.setLayoutRating(-10000005)
		.setClass(-1)
		.setColor(Color3.fromRGB(255, 255, 255));

	static readonly A = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.A)
		.setName("A")
		.setLayoutRating(-10000004)
		.setClass(-1)
		.setColor(Color3.fromRGB(235, 26, 36));

	static readonly FelixtheDA = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.FelixtheDA);

	static readonly Exist = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Exist)
		.setName("Exist")
		.setLayoutRating(-10000002)
		.setClass(-1)
		.setColor(Color3.fromRGB(255, 255, 255));

	static readonly Disco = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Disco);

	static readonly Relax = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Relax)
		.setName("Relax")
		.setLayoutRating(-1000000)
		.setClass(-1)
		.setColor(Color3.fromRGB(255, 255, 255));

	static readonly Skip = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Skip)
		.setName("Skip")
		.setLayoutRating(-1000)
		.setClass(-1)
		.setColor(Color3.fromRGB(255, 172, 101));

	static readonly Restful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Restful)
		.setName("Restful")
		.setLayoutRating(-50)
		.setClass(-1)
		.setColor(Color3.fromRGB(4, 61, 1));

	static readonly Ifinity = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Ifinity)
		.setName("Ifinity")
		.setLayoutRating(-40)
		.setClass(-1)
		.setColor(Color3.fromRGB(35, 7, 51));

	static readonly InstantWin = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.InstantWin)
		.setName("Instant Win")
		.setLayoutRating(-31)
		.setClass(-1)
		.setColor(Color3.fromRGB(0, 46, 255));

	static readonly Millisecondless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Millisecondless)
		.setName("Millisecondless")
		.setLayoutRating(-30)
		.setClass(0)
		.setColor(Color3.fromRGB(244, 112, 254));

	static readonly Astronomical = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Astronomical)
		.setName("Astronomical")
		.setLayoutRating(-29.5)
		.setClass(0)
		.setColor(Color3.fromRGB(21, 0, 186));

	static readonly Win = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Win)
		.setName("Win")
		.setLayoutRating(-29)
		.setClass(0)
		.setColor(Color3.fromRGB(39, 119, 232));

	static readonly Winsome = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Winsome)
		.setName("Winsome")
		.setLayoutRating(-28)
		.setClass(0)
		.setColor(Color3.fromRGB(106, 205, 255));

	static readonly DoNothing = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DoNothing)
		.setName("Do Nothing")
		.setLayoutRating(-27)
		.setClass(0)
		.setColor(Color3.fromRGB(153, 209, 229));

	static readonly Sleepful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Sleepful)
		.setName("Sleepful")
		.setLayoutRating(-26.5)
		.setClass(0)
		.setColor(Color3.fromRGB(52, 155, 255));

	static readonly Blessing = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Blessing)
		.setName("Blessing")
		.setLayoutRating(-26)
		.setClass(0)
		.setColor(Color3.fromRGB(114, 224, 178));

	static readonly Vintage = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Vintage)
		.setName("Vintage")
		.setLayoutRating(-25)
		.setClass(0)
		.setColor(Color3.fromRGB(217, 120, 255));

	static readonly Ifinitude = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Ifinitude)
		.setName("Ifinitude")
		.setLayoutRating(-24.5)
		.setClass(0)
		.setColor(Color3.fromRGB(43, 43, 43));

	static readonly JustAir = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.JustAir)
		.setName("Just Air")
		.setLayoutRating(-24)
		.setClass(0)
		.setColor(Color3.fromRGB(64, 115, 255));

	static readonly Happylike = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Happylike)
		.setName("Happylike")
		.setLayoutRating(-23)
		.setClass(0)
		.setColor(Color3.fromRGB(59, 59, 59));

	static readonly Locomotion = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Locomotion)
		.setName("Locomotion")
		.setLayoutRating(-22)
		.setClass(0)
		.setColor(Color3.fromRGB(255, 97, 97));

	static readonly Walkthrough = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Walkthrough)
		.setName("Walkthrough")
		.setLayoutRating(-21)
		.setClass(0)
		.setColor(Color3.fromRGB(107, 196, 255));

	static readonly AutomaticJoyful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.AutomaticJoyful)
		.setName("Automatic Joyful")
		.setLayoutRating(-20)
		.setClass(0)
		.setColor(Color3.fromRGB(171, 255, 77));

	static readonly Unlosable = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Unlosable)
		.setName("Unlosable")
		.setLayoutRating(-19)
		.setClass(0)
		.setColor(Color3.fromRGB(255, 143, 255));

	static readonly Roll = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Roll);

	static readonly Mazeophobia = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Mazeophobia);

	static readonly ShatteredBabass = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ShatteredBabass)
		.setName("Shattered Babass")
		.setLayoutRating(-18.5)
		.setClass(0)
		.setColor(Color3.fromRGB(147, 27, 220));

	static readonly Frivolous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Frivolous)
		.setName("Frivolous")
		.setLayoutRating(-18)
		.setClass(0)
		.setColor(Color3.fromRGB(107, 196, 219));

	static readonly Vibeness = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Vibeness)
		.setName("Vibeness")
		.setLayoutRating(-17.5)
		.setClass(0)
		.setColor(Color3.fromRGB(255, 69, 156));

	static readonly Automatic = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Automatic)
		.setName("Automatic")
		.setLayoutRating(-17)
		.setClass(0)
		.setColor(Color3.fromRGB(214, 255, 186));

	static readonly Spontaneous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Spontaneous)
		.setName("Spontaneous")
		.setLayoutRating(-16)
		.setClass(0)
		.setColor(Color3.fromRGB(117, 255, 28));

	static readonly Joyful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Joyful)
		.setName("Joyful")
		.setLayoutRating(-15)
		.setClass(1)
		.setColor(Color3.fromRGB(206, 250, 0));

	static readonly DoSomething = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DoSomething)
		.setName("Do Something")
		.setLayoutRating(-14.5)
		.setClass(1)
		.setColor(Color3.fromRGB(0, 153, 255));

	static readonly Placid = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Placid)
		.setName("Placid")
		.setLayoutRating(-14)
		.setClass(1)
		.setColor(Color3.fromRGB(255, 255, 255));

	static readonly PressaKey = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.PressaKey);

	static readonly TaptoMove = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TaptoMove);

	static readonly WalkASlope = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.WalkASlope)
		.setName("Walk A Slope")
		.setLayoutRating(-12.33)
		.setClass(1)
		.setColor(Color3.fromRGB(112, 112, 112));

	static readonly ClimbATruss = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ClimbATruss)
		.setName("Climb A Truss")
		.setLayoutRating(-12)
		.setClass(1)
		.setColor(Color3.fromRGB(134, 133, 133));

	static readonly Tranquil = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Tranquil)
		.setName("Tranquil")
		.setLayoutRating(-11.5)
		.setClass(1)
		.setColor(Color3.fromRGB(0, 141, 255));

	static readonly Jumpless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Jumpless)
		.setName("Jumpless")
		.setLayoutRating(-11)
		.setClass(1)
		.setColor(Color3.fromRGB(201, 192, 231));

	static readonly Starter = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Starter)
		.setName("Starter")
		.setLayoutRating(-10)
		.setClass(1)
		.setColor(Color3.fromRGB(0, 168, 243));

	static readonly Cakewalk = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Cakewalk)
		.setName("Cakewalk")
		.setLayoutRating(-9.5)
		.setClass(1)
		.setColor(Color3.fromRGB(66, 165, 245));

	static readonly Sweet = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Sweet)
		.setName("Sweet")
		.setLayoutRating(-9)
		.setClass(1)
		.setColor(Color3.fromRGB(255, 253, 150));

	static readonly Sugary = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Sugary)
		.setName("Sugary")
		.setLayoutRating(-8.66)
		.setClass(1)
		.setColor(Color3.fromRGB(255, 255, 0));

	static readonly Aesthetic = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Aesthetic)
		.setName("Aesthetic")
		.setLayoutRating(-8.33)
		.setClass(1)
		.setColor(Color3.fromRGB(118, 244, 71));

	static readonly Lovely = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Lovely)
		.setName("Lovely")
		.setLayoutRating(-8)
		.setClass(1)
		.setColor(Color3.fromRGB(221, 251, 221));

	static readonly Glee = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Glee)
		.setName("Glee")
		.setLayoutRating(-7.5)
		.setClass(1)
		.setColor(Color3.fromRGB(248, 218, 219));

	static readonly Flowerness = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Flowerness)
		.setName("Flowerness")
		.setLayoutRating(-7)
		.setClass(1)
		.setColor(Color3.fromRGB(157, 149, 254));

	static readonly Coasterifying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Coasterifying)
		.setName("Coasterifying")
		.setLayoutRating(-6.66)
		.setClass(1)
		.setColor(Color3.fromRGB(0, 115, 255));

	static readonly ADifficultyNamedDifficulty = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ADifficultyNamedDifficulty)
		.setName("A Difficulty Named Difficulty")
		.setLayoutRating(-6.33)
		.setClass(1)
		.setColor(Color3.fromRGB(247, 51, 83));

	static readonly Pleasant = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Pleasant)
		.setName("Pleasant")
		.setLayoutRating(-6)
		.setClass(1)
		.setColor(Color3.fromRGB(161, 220, 255));

	static readonly PieceoCake = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.PieceoCake);

	static readonly Tutorial = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Tutorial)
		.setName("Tutorial")
		.setLayoutRating(-5)
		.setClass(1)
		.setColor(Color3.fromRGB(24, 83, 17));

	static readonly HellishEncore = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.HellishEncore)
		.setName("Hellish Encore")
		.setLayoutRating(-4.66)
		.setClass(1)
		.setColor(Color3.fromRGB(170, 5, 8));

	static readonly Delightful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Delightful)
		.setName("Delightful")
		.setLayoutRating(-4.33)
		.setClass(1)
		.setColor(Color3.fromRGB(236, 218, 140));

	static readonly TooEasy = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TooEasy)
		.setName("TooEasy")
		.setLayoutRating(-4)
		.setClass(1)
		.setColor(Color3.fromRGB(14, 88, 1));

	static readonly Peaceful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Peaceful)
		.setName("Peaceful")
		.setLayoutRating(-3)
		.setClass(1)
		.setColor(Color3.fromRGB(199, 176, 218));

	static readonly Playful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Playful)
		.setName("Playful")
		.setLayoutRating(-2.5)
		.setClass(1)
		.setColor(Color3.fromRGB(163, 255, 80));

	static readonly Babying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Babying);

	static readonly Magnificent = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Magnificent)
		.setName("Magnificent")
		.setLayoutRating(-2)
		.setClass(1)
		.setColor(Color3.fromRGB(145, 206, 255));

	static readonly Facile = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Facile)
		.setName("Facile")
		.setLayoutRating(-1.5)
		.setClass(1)
		.setColor(Color3.fromRGB(87, 215, 254));

	static readonly Effortlessless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Effortlessless)
		.setName("Effortlessless")
		.setLayoutRating(-1)
		.setClass(1)
		.setColor(Color3.fromRGB(153, 217, 234));

	static readonly Gravel = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Gravel)
		.setName("Gravel")
		.setLayoutRating(-0.5)
		.setClass(1)
		.setColor(Color3.fromRGB(154, 246, 209));

	static readonly Effortless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Effortless)
		.setName("Effortless")
		.setLayoutRating(0)
		.setClass(2)
		.setColor(Color3.fromRGB(0, 206, 0));

	static readonly Playground = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Playground)
		.setName("Playground")
		.setLayoutRating(0.33)
		.setClass(2)
		.setColor(Color3.fromRGB(0, 206, 100));

	static readonly Elementary = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Elementary);

	static readonly Simple = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Simple)
		.setName("Simple")
		.setLayoutRating(0.66)
		.setClass(2)
		.setColor(Color3.fromRGB(76, 176, 81));

	static readonly Easy = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Easy)
		.setName("Easy")
		.setLayoutRating(1)
		.setClass(2)
		.setColor(Color3.fromRGB(118, 244, 71));

	static readonly Neat = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Neat);

	static readonly Calm = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Calm);

	static readonly Switch = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Switch);

	static readonly Medium = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Medium);

	static readonly Normal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Normal);

	static readonly Intermediate = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Intermediate);

	static readonly Rewardable = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Rewardable);

	static readonly Hard = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Hard);

	static readonly Tricky = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Tricky);

	static readonly Onerous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Onerous);

	static readonly Easeful = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Easeful);

	static readonly Difficult = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Difficult);

	static readonly Strenuous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Strenuous);

	static readonly Menacing = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Menacing);

	static readonly Harming = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Harming);

	static readonly Challenging = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Challenging);

	static readonly Irritating = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Irritating);

	static readonly Maniacal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Maniacal);

	static readonly Hectic = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Hectic);

	static readonly Intense = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Intense);

	static readonly TooMedium = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TooMedium);

	static readonly Severe = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Severe);

	static readonly Hellish = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Hellish);

	static readonly Remorseless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Remorseless);

	static readonly C0RrUpT = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.C0RrUpT);

	static readonly Psycho = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Psycho);

	static readonly Harsh = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Harsh);

	static readonly Relentless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Relentless);

	static readonly Angerable = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Angerable);

	static readonly Complex = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Complex);

	static readonly Insane = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Insane);

	static readonly Thanos = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Thanos);

	static readonly Madness = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Madness);

	static readonly Classical = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Classical);

	static readonly Extreme = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Extreme);

	static readonly Uneasy = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Uneasy);

	static readonly Turmoil = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Turmoil);

	static readonly Absurd = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Absurd);

	static readonly Terrifying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Terrifying);

	static readonly Ghastly = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Ghastly);

	static readonly Petrifying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Petrifying);

	static readonly Horrifying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Horrifying);

	static readonly Catastrophic = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Catastrophic);

	static readonly ChampionsRoad = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ChampionsRoad);

	static readonly Eccentric = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Eccentric);

	static readonly Dorcelessness = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Dorcelessness);

	static readonly Horrific = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Horrific);

	static readonly Reversed = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Reversed);

	static readonly Eternal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Eternal);

	static readonly Confident = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Confident);

	static readonly Unreal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Unreal);

	static readonly HYPER = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.HYPER);

	static readonly Treacherous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Treacherous);

	static readonly Oblivious = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Oblivious);

	static readonly Anguish = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Anguish);

	static readonly Prodigious = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Prodigious);

	static readonly TheHumanLimit = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TheHumanLimit);

	static readonly nil = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.nil);

	static readonly Jank = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Jank);

	static readonly TheHeartofVoid = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TheHeartofVoid);

	static readonly eRRoR = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.eRRoR);

	static readonly Nightmare = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Nightmare);

	static readonly Literal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Literal);

	static readonly WHY = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.WHY);

	static readonly MAXIMUMOVERDRIVE = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.MAXIMUMOVERDRIVE);

	static readonly No = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.No);

	static readonly Purgatory = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Purgatory);

	static readonly DEATH = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DEATH);

	static readonly Nullifying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Nullifying);

	static readonly HELL = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.HELL);

	static readonly Vortex = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Vortex);

	static readonly TARTARUS = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TARTARUS);

	static readonly CALAMITY = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.CALAMITY);

	static readonly Neutralize = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Neutralize);

	static readonly Killjoying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Killjoying);

	static readonly Unimaginable = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Unimaginable);

	static readonly Dimension = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Dimension);

	static readonly Omega = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Omega);

	static readonly Disarray = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Disarray);

	static readonly SUFFER = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.SUFFER);

	static readonly CHAOS = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.CHAOS);

	static readonly AlephNull = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.AlephNull);

	static readonly Mystical = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Mystical);

	static readonly Reality = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Reality);

	static readonly Immeasurable = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Immeasurable);

	static readonly Noxious = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Noxious);

	static readonly Malicious = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Malicious);

	static readonly Autism = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Autism);

	static readonly Malevolent = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Malevolent);

	static readonly Building = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Building);

	static readonly UnderConstruction = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.UnderConstruction);

	static readonly DoesNotCompute = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DoesNotCompute);

	static readonly Exile = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Exile);

	static readonly Invigorating = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Invigorating);

	static readonly Apocalyptic = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Apocalyptic);

	static readonly EternalOutrage = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.EternalOutrage);

	static readonly Destructive = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Destructive);

	static readonly Dissonant = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Dissonant);

	static readonly Mischievous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Mischievous);

	static readonly LRIH = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.LRIH);

	static readonly Monstrous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Monstrous);

	static readonly Inimical = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Inimical);

	static readonly Horrendous = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Horrendous);

	static readonly Ultimate = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Ultimate);

	static readonly Nought = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Nought);

	static readonly SystemError = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.SystemError);

	static readonly Errorexe = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Errorexe);

	static readonly SimplyBeyond = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.SimplyBeyond);

	static readonly Ultra = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Ultra);

	static readonly Critical = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Critical);

	static readonly Winter = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Winter);

	static readonly FatalError = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.FatalError);

	static readonly UDEDSON = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.UDEDSON);

	static readonly REEE = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.REEE);

	static readonly Nonexistent = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Nonexistent);

	static readonly DIE = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DIE);

	static readonly Absolutism = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Absolutism);

	static readonly Insistent = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Insistent);

	static readonly Shocking = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Shocking);

	static readonly Victor = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Victor);

	static readonly Oblivion = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Oblivion);

	static readonly QUANTUM = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.QUANTUM);

	static readonly Miracle = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Miracle);

	static readonly YEETUS = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.YEETUS);

	static readonly DELETE = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DELETE);

	static readonly Interruption = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Interruption);

	static readonly XiAlpha = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.XiAlpha);

	static readonly DELTA = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DELTA);

	static readonly Y = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Y);

	static readonly ThetaVoid = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ThetaVoid);

	static readonly Ultimaniac = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Ultimaniac);

	static readonly Supreme = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Supreme);

	static readonly Phi = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Phi);

	static readonly UNTHINKABLE = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.UNTHINKABLE);

	static readonly UltraInstinct = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.UltraInstinct);

	static readonly Mortifying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Mortifying);

	static readonly Dreadfulexe = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Dreadfulexe);

	static readonly Transfinite = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Transfinite);

	static readonly RoorXD = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.RoorXD);

	static readonly RoorHELL = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.RoorHELL);

	static readonly JesusBallin = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.JesusBallin);

	static readonly HyperViolent = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.HyperViolent);

	static readonly Enclosed = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Enclosed);

	static readonly ElVacio = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ElVacio);

	static readonly Unpossible = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Unpossible);

	static readonly UniverseDisruption = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.UniverseDisruption);

	static readonly Spongebob = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Spongebob);

	static readonly CompleteObstacles = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.CompleteObstacles);

	static readonly Illegal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Illegal);

	static readonly BadRequest = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.BadRequest);

	static readonly UniversalGlitch = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.UniversalGlitch);

	static readonly FalseGanar = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.FalseGanar);

	static readonly Hopeless = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Hopeless);

	static readonly PlumBloc = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.PlumBloc);

	static readonly Gameifying = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Gameifying);

	static readonly Infinity = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Infinity);

	static readonly Void = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Void);

	static readonly Doog = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Doog);

	static readonly Dissension = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Dissension);

	static readonly MegaDeath = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.MegaDeath);

	static readonly TooPrecise = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TooPrecise);

	static readonly Epitome = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Epitome);

	static readonly Agony = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Agony);

	static readonly ILOVEYOU = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ILOVEYOU);

	static readonly Abyssal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Abyssal);

	static readonly DillyImpossible = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.DillyImpossible);

	static readonly Gigaversal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Gigaversal);

	static readonly Unreasonable = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Unreasonable);

	static readonly ResilientGlow = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ResilientGlow);

	static readonly Arcane = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Arcane);

	static readonly COMMUNISM = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.COMMUNISM);

	static readonly Detroit = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Detroit);

	static readonly SacrificinglyImpossible = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.SacrificinglyImpossible);

	static readonly SatanTartarusLuciferVoid = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.SatanTartarusLuciferVoid);

	static readonly QRCode = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.QRCode);

	static readonly Vacant = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Vacant);

	static readonly How = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.How);

	static readonly Errorisation = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Errorisation);

	static readonly Godlike = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Godlike);

	static readonly Esoteric = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Esoteric);

	static readonly CompleteUsers = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.CompleteUsers);

	static readonly BobuxDeath = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.BobuxDeath);

	static readonly AlephDEATH = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.AlephDEATH);

	static readonly Limiting = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Limiting);

	static readonly TheCrystalCore = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TheCrystalCore);

	static readonly Rush = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Rush);

	static readonly AlephVSC = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.AlephVSC);

	static readonly Misery = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Misery);

	static readonly Mysterious = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Mysterious);

	static readonly Undocumented = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Undocumented);

	static readonly Denial = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Denial);

	static readonly AlephSomething = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.AlephSomething);

	static readonly Omniscient = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Omniscient);

	static readonly Enigmatic = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Enigmatic);

	static readonly Vreryhawrfdrdifficutl = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Vreryhawrfdrdifficutl);

	static readonly Freesmileyde = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Freesmileyde);

	static readonly HELLWRATH = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.HELLWRATH);

	static readonly Hellacious = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Hellacious);

	static readonly LOOP = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.LOOP);

	static readonly Bryanjr4474 = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Bryanjr4474);

	static readonly ERRosion = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ERRosion);

	static readonly Confusion = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Confusion);

	static readonly Dynamix = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Dynamix);

	static readonly Eshinion = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Eshinion);

	static readonly Caught = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Caught);

	static readonly TooAbnormal = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TooAbnormal);

	static readonly Catch = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Catch);

	static readonly IMPOSSIBLEEXE = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.IMPOSSIBLEEXE);

	static readonly ExploitistElite = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.ExploitistElite);

	static readonly TooTooHard = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TooTooHard);

	static readonly TrueObamaPrism = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TrueObamaPrism);

	static readonly Zany = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Zany);

	static readonly OhNoez = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.OhNoez);

	static readonly Viratical = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Viratical);

	static readonly Pinnacle = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Pinnacle);

	static readonly TheMiddleline = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.TheMiddleline);

	static readonly Missing = Difficulty.fromGeneratedEntry(GENERATED_DIFFICULTIES.Missing);

	static readonly Bonuses = new Difficulty("Bonuses")
		.setName("Bonuses")
		.setLayoutRating(-10000014)
		.setClass(-3)
		.setColor(Color3.fromRGB(255, 252, 89));

	static readonly Excavation = new Difficulty("Excavation")
		.setName("Materials")
		.setLayoutRating(-10000013)
		.setClass(-3)
		.setColor(Color3.fromRGB(110, 166, 255));

	static readonly Miscellaneous = new Difficulty("Miscellaneous")
		.setName("Miscellaneous")
		.setLayoutRating(-10000012)
		.setClass(-3)
		.setColor(Color3.fromRGB(255, 110, 110));

	static readonly FelixTheA = new Difficulty("FelixTheA")
		.setName("Felix the ДА")
		.setLayoutRating(-10000003)
		.setClass(-1)
		.setColor(Color3.fromRGB(77, 255, 0));

	static readonly ReversedPeripherality = new Difficulty("ReversedPeripherality")
		.setName("Reversed Peripherality")
		.setLayoutRating(-10000001)
		.setClass(-1)
		.setColor(Color3.fromRGB(127, 95, 140));

	static readonly PressAKey = new Difficulty("PressAKey")
		.setName("Press A Key")
		.setLayoutRating(-13)
		.setClass(1)
		.setColor(Color3.fromRGB(255, 255, 255));

	static readonly TapToMove = new Difficulty("TapToMove")
		.setName("Tap to Move")
		.setLayoutRating(-12.66)
		.setClass(1)
		.setColor(Color3.fromRGB(41, 41, 41));

	static readonly PieceOCake = new Difficulty("PieceOCake")
		.setName("Piece o' Cake")
		.setLayoutRating(-5.5)
		.setClass(1)
		.setColor(Color3.fromRGB(254, 149, 253));
	// </AUTO-GENERATED-STATIC-DIFFICULTIES>
}

export = Difficulty;
